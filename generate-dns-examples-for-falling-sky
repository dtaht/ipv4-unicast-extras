#! /usr/bin/env perl

use Getopt::Long;
use POSIX;
use strict;

$|=1;

my(%argv,%input,%defaults,$usage);

%defaults = (
  4=>"192.0.2.1",
  6=>"2001:db8::1",
  domain=>"test-ipv6.example.com",
  ns=>"ns1.example.com",
  hostmaster=>"hostmaster.example.com",
  serial=> strftime('%Y%m%d01',gmtime time)
);

%input=( "4|ipv4=s"=>"ipv4 address ($argv{4})",
 "6|ipv6=s"=>"ipv6 address ($argv{6})",
 "domain=s"=>"the same domain in your /site/config.js (load->domain) ($argv{domain})",
 "ns|nameserver=s"=>"name server to specify for SOA records ($argv{ns})",
 "hostmaster=s"=>"hostmaster for SOA ($argv{hostmaster})",
 "serial=s"=>"serial to use ($argv{serial})",
 "h|help"=>"show option help");

my $result = GetOptions(\%argv,keys %input);
$argv{"v"} ||= $argv{"n"};

if ((!$result)  || ($argv{h})) {
   &showOptionsHelp; exit 0;
}

foreach my $key (sort keys %defaults) {
  $argv{$key} ||= $defaults{$key};
}

$argv{"buggy"} = make_buggy($argv{"4"});


my $main = <<"EOF";

On your main name servers:

;################################################################
;# ZONE: $argv{domain}. 
;# Put this on your real name servers.  Fix the SOA and NS
;# to reflect your environment.
;################################################################

\$TTL 300
\@	IN SOA $argv{ns}. $argv{hostmaster}. (
  $argv{serial} ; Serial
  86400 ; Refresh
  7200  ; Retry
  604800 ; Expire
  172800) ; Minimum

; Main web site is intentionally IPv4 only, per the FAQ.
		A	$argv{4}
www		A	$argv{4}

; Specific records for tests
ipv4		A	$argv{4}
ipv6		AAAA	$argv{6}
ds		A	$argv{4}
ds		AAAA	$argv{6}

; DNS recursive resolver testing;
; Delegated to the VM running $argv{domain}; IPv6-only
v6ns		ns	v6ns1
v6ns1		AAAA	$argv{6}

; buggydns detects CPE devices that misinterpret AAAA 
; requests for A; the buggy CPE will return either the
; first or last 32 bits.
; Do not use where IPv4 is between 32.0.0.0 and 63.255.255.255.
;buggydns1	AAAA	$argv{buggy}

; Convenience names not used in the tests;
; but perhaps friendly for humans
a		A	$argv{4}
aaaa		AAAA	$argv{6}
www4		A	$argv{4}
www6		AAAA	$argv{6}
v4		A	$argv{4}
v6		AAAA	$argv{6}

EOF

if ($argv{buggy}) {
  $main =~ s#^;buggydns1#buggydns1#gm;
}


save_file("main","$argv{domain}",$main);


save_file("vm","v6ns.$argv{domain}",<<"EOF");

;################################################################
;# ZONE: v6ns.$argv{domain}. 
;# Put this on the VM operating your test-ipv6.com mirror.
;# Do NOT put this on your main DNS server.
;################################################################

\$TTL 300
\@	IN SOA v6ns1.$argv{domain}. $argv{hostmaster}. (
  $argv{serial} ; Serial
  86400 ; Refresh
  7200  ; Retry
  604800 ; Expire
  172800) ; Minimum

		NS	v6ns1.$argv{domain}.

; Specific records for tests
ipv4		A	$argv{4}
ipv6		AAAA	$argv{6}
ds		A	$argv{4}
ds		AAAA	$argv{6}
a		A	$argv{4}
aaaa		AAAA	$argv{6}
www4		A	$argv{4}
www6		AAAA	$argv{6}
v4		A	$argv{4}
v6		AAAA	$argv{6}

EOF


save_file("vm","v6ns1.$argv{domain}",<<"EOF");
;################################################################
;# ZONE: v6ns1.$argv{domain}.
;# Put this on the VM operating your test-ipv6.com mirror.
;# Do NOT put this on your main DNS server.
;################################################################

\$TTL 300
\@	IN SOA v6ns1.$argv{domain}. $argv{hostmaster}. (
  $argv{serial} ; Serial
  86400 ; Refresh
  7200  ; Retry
  604800 ; Expire
  172800) ; Minimum

		NS	v6ns1.$argv{domain}.
		AAAA	$argv{6}


EOF


sub save_file {
  my($dir,$file,$content) = @_;
  mkdir($dir);
  open(FILE,">$dir/$file") or die "failed to write $dir/$file : $!";
  print FILE $content;
  close FILE;
}


sub make_buggy {
  my(@v4) = split(/\./,$argv{"4"});
  my $once = sprintf("%02x%02x:%02x%02x",@v4);
  my $buggydns = join(":",$once,$once,$once,$once);
  return $buggydns if ($v4[0] <32);
  return $buggydns if ($v4[0] >=64);
  return;
}



sub showOptionsHelp {
 my($left,$right,$a,$b,$key);
 my(@array);
 print "Usage: $0 [options] $usage\n";
 print "where options can be:\n";
 foreach $key (sort keys (%input)) {
    ($left,$right) = split(/[=:]/,$key);
    ($a,$b) = split(/\|/,$left);
    if ($b) {  
      $left = "-$a --$b";
    } else {
      $left = "   --$a";
    }
    $left = substr("$left" . (' 'x20),0,20);
    push(@array,"$left $input{$key}\n");
 }
 print sort @array;
}
